# m���ȉ������o��
def mul(f_ary, b_ary, m)
  s1, s2 = f_ary.size, b_ary.size
  ary = Array.new(s1 + s2 - 1, 0)
  (0..s1 - 1).each{|i|
    (0..s2 - 1).each{|j|
      ary[i + j] += f_ary[i] * b_ary[j]
    }
  }
  ary[0..m]
end

def I(ary, n)
  a = [1]
  (0..n - 1).each{|i| a << -(0..i).inject(0){|s, j| s + ary[1 + i - j] * a[j]}}
  a
end

m = 200
p_ary =
[1, -6, -64, 200, 1000, -3016, -3488, 24256,
 -23776, -104168, 203408, 184704, -443392,
 -14336, 151296, -145920, 263424, -317440,
 -36864, 966656, -573440, -131072]
q_ary =
[1, -4, -26, 4, -43, -116, 888, 1224,
 10292, 6052, -7088, 111280, -16192,
 -204080, 407232, -681472, 66432,
 -699392, -943104, -126976, 98304]
r_ary =
[1, -3, 0, -9, -14, 61, 110, 61, -35,
 -498, -1262, -356, 3864, 3788, -6008,
 -2472, -7532, -17956, 17732, 36088,
 -35176, 2256, 154624, 109008, 73376,
 71440, -104336, -762592, -277728, -123008,
 -573760, -771456, 221568, 122368, -1205760,
 1966592, 714752, -2555904, -412672, 1376256,
 -272384, -294912, 1781760, 860160, 516096,
 1081344, -65536, -262144, 131072]

ary10 =
[0, 0, 0, 0, -2, 6, 32, -91, 108, -465, -3637,
   10771, 2325, 18721, 171611, -585523,
   -396395, -682849, -4235681, 19633735, 18996755,
   19093765, 53067037, -478040182, -548808389,
   -272099578, 99124246, 9238848362, 10617083638,
   -1326271784, -21368020616, -141238017880,
   -134392393352, 146632364076, 549061732140,
   1593635456720, 847737947424, -3359839026764,
   -8199885942532, -11817729854520, 4470847928448,
   44985860446344, 75417736772776, 41052444790080,
   -161959393818960, -395240529888896, -360574399734720,
   152754263401952, 1716838729497632, 2369355589689568,
   -116283321402976, -2752751355252672, -9573026830585088,
   -10836445689890240, 11082171458107200, 18669207887425408,
   29684344445342080, 52873372588828544, -41812705766547456,
   -121892096731426304, -129367640322224000,
   -299351435235273344, -4272725099376128,
   959018976196361472, 1501626026299465984,
   1126635861868028416, -1312054511814043904,
   -6281405879092401664, -9998544859391214592,
   345842293994065408, 23438971031990525440,
   27613342147451372544, 18735021985824688640,
   -27756690114906473472, -140273734997306702848,
   -75268328018463164416, 138279805585283947520,
   148601766795439879168, 310092565151408475136,
   99660310022131234816, -929030452751789758464,
   -388282869262293155840, 606648700399067754496,
   87564877715883159552, 1529476087828639281152,
   172798188279750090752, -5173141273303723016192,
   -277391137321748135936, 5234301470080795287552,
   2982695497894809976832, 9153093558466974498816,
   -4247866785647180152832, -32038001980536096047104,
   -10236580293112114528256, 16318180954295504617472,
   28945972071705262325760, 73306312281463920361472,
   -716787112754376736768, -118222134654887364395008,
   -69377035329810834325504, -62772131681268743995392,
   71742019839583955582976, 287535417169237064679424,
   9915871514472405270528, -159882598292740527095808,
   -91554524545963890573312, -299347948291003811102720,
   293024518169071175860224, 644652542769252884545536,
   -313782304821263993929728, -309039150522319333490688,
   -485524416752034730999808, -710163496431999149670400,
   1045217135710526509154304, 1343475648128208653516800,
   -572035294664510933041152, -624489636735131565686784,
   -651172782170587118174208, -1054523143868045305315328,
   3067547793305302105849856, 2309953882806209648525312,
   -1646204301332184416911360, -1179316074330817545895936,
   -3361452201934528024936448, -1872315354847673124388864,
   2552418492728380454076416, 2312451755176503566925824,
   -2092447391552272559243264, 272587570978416396075008,
   2120420465682278210600960, -1464920285536691003850752,
   6665414743961094974341120, 437206599197461019885568,
   -8717997837848029689806848, 433562255240785934942208,
   -1051837533156049749540864, -1353795424943843357753344,
   7120052239194963201490944, 2694439950503867093876736,
   -5469685596670051324264448, 2388057296656668433580032,
   1857305873625371973255168, -6233957703236907652087808,
   1870622914710554181369856, -340193225977415616954368,
   -5678188157950623433621504, 2864604435282318749335552,
   2462256744989383102300160, -2068804571445174948855808,
   1874372066586394439450624, 2075481001436645123162112,
   -1165767381159206415499264, 1381116855842457274810368,
   706861976320240724738048, -1931359032315239477542912,
   54548595354419607896064, 214962264988336194060288,
   -375280895722266334068736, 571140103333652832714752,
   318446449470697627451392, -513105492535911185907712,
   -310588164924270006239232, -155527806053471626461184,
   -228675157485332631388160, 111435385959294823301120,
   110547900987225659146240, 28404033964839691878400,
   60151067415078366085120, 5503362715849727148032,
   7434037861704949301248, 5203332908674304704512,
   -1944906520677712920576, 2346771722627237019648,
   -285348072390194626560, 247301662738168676352,
   -19599665578316398592, 23058430092136939520,
   -9223372036854775808, 4611686018427387904]
ary10 = ary10.map{|i| -4 * i}
ary11 = p_ary + [0] * (m - (p_ary.size - 1))
ary12 = I(mul(ary11, ary11, m), m)
ary13 = Array.new(m + 1, 0)
(0..m / 2).each{|i| ary13[2 * i] = ary12[i]}
ary21 = q_ary + [0] * (m - (q_ary.size - 1))
ary22 = I(ary21, m)
ary23 = Array.new(m + 1, 0)
(0..m / 2).each{|i| ary23[2 * i] = ary22[i]}
ary31 = r_ary + [0] * (m - (r_ary.size - 1))
ary32 = I(ary31, m)
ary41 = mul(ary13, ary23, m)
ary42 = mul(ary41, ary32, m)
t_ary = mul(ary10, ary42, m)

(1..m).each{|i|
  j = 0
  j += t_ary[i]
  break if j.to_s.size > 1000
  print i
  print ' '
  puts 2 * j
}
